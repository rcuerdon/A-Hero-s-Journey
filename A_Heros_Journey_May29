/*      _       _     _  _____  ____      ___        _____
       /\       |     | |      |     )  /     \  )  /
      /__\      |_____| |_____ |_____/ (       )   (______
     /    \     |     | |      |    \  \       /           )
    /      \    |     | |_____ |     |  ( ___ )      _____/
  
  _________   ___    _      _  ____   __    _  _____ __     __
        \   /     \  |      | |     ) | \   | |       \     /
         | (       ) |      | |_____/ |  \  | |_____   \_ _/
         | \       / \      / |    \  |   \ | |          |
   \____/   ( ___ )   ( __ )  |     | |    \| |_____     |
  
  */

boolean keyleft = false;
boolean keyright = false;
boolean keyup = false;
boolean swingsword = false;
boolean displaytext = true;
boolean winscreen = false;
boolean losescreen = false;
int swordAngle = 90;
int angleChange = 5;
final int angleLimit = 180;
float ground = 525;
float gravity = .5;
int numPlatforms = 30;
int numEnemies = 14;

Hero myHero;//declares the Hero as an object
EndofLevel Level1;
healthbar myhealthbar;
ArrayList<Platform> alltheplatforms;//declares the platforms as an arrayList
ArrayList<Enemy> alltheenemies;//declares the enemies as an arrayList

int[] data;


void setup() {
  size(1000,600);
  frameRate(60);
  textSize(60);
  textAlign(CENTER);
  noFill();
  myHero = new Hero(500, ground, 0, 0, 12, 7);//creates the Hero
  Level1 = new EndofLevel(5000, 0);//creates the end of level 1
  myhealthbar = new healthbar(50,20,300);//creates the healthbar
  alltheplatforms = new ArrayList<Platform>();//creates the platforms
  alltheenemies = new ArrayList<Enemy>();//creates the enemies
  //data for making platforms
  data = new int[6];
  data[0] = 20;
  data[1] = 450;
  data[2] = 300;
  data[3] = 150;
  
}//ends setup

void draw() {
  background(255);
  fill(20);
  
  
  if (displaytext){
    textSize(20);
    text("Kill enemies and reach the end of the level",500,150);
    text("use 'a' and 'd' to move; use 'w' to jump; use SPACE to swing sword", 500, 200);
  }
  if (keyPressed){
    displaytext = false;
  }
  
    
  
  
  noFill();
  rectMode(CORNER);
  myHero.drawHero();
  myHero.walk();
  myHero.jump();
  Level1.display();
  myhealthbar.display();
  
  fill(20);
  rect(0,575,1000,25);
  
  for(int j = 0; j < numEnemies; j++){
    noFill();
    //enemies on the ground
    alltheenemies.add(new Enemy(1200, 495, 3));
    alltheenemies.add(new Enemy(2400, 495, 3));
    
    //enemies on bottom platforms
    alltheenemies.add(new Enemy(800, 370, 3));
    alltheenemies.add(new Enemy(2100, 370, 3));
    alltheenemies.add(new Enemy(3200, 370, 3));
    alltheenemies.add(new Enemy(3800, 370, 3));
    alltheenemies.add(new Enemy(4000, 370, 3));
    alltheenemies.add(new Enemy(1500, 370, 3));
    
    //enemies on middle platforms
    alltheenemies.add(new Enemy(2300, 220, 3));
    alltheenemies.add(new Enemy(2600, 220, 3));
    alltheenemies.add(new Enemy(3400, 220, 3));
    alltheenemies.add(new Enemy(4300, 220, 3));
    
    //enemies on top platforms
    alltheenemies.add(new Enemy(2100, 70, 3));
    alltheenemies.add(new Enemy(3000, 70, 3));
    
    Enemy myEnemy = alltheenemies.get(j);
    myEnemy.display();
    myEnemy.walk();
    if (keyleft == true) {
      myEnemy.xpos += myHero.position.x / 50;
      myEnemy.display();
      myEnemy.walk();
      Level1.xpos += myHero.position.x/750;
      Level1.display();
  }
  if (keyright == true) {
      myEnemy.xpos += -myHero.position.x / 50;
      myEnemy.display();
      myHero.walk();
      Level1.xpos += -myHero.position.x/750;
      Level1.display();
  }
   //defines when health is lost
  if (myHero.position.x < myEnemy.xpos && myHero.position.x+80 > myEnemy.xpos+60 && myHero.position.y < myEnemy.ypos && myHero.position.y+100 > myEnemy.ypos+80){
    myhealthbar.health = myhealthbar.health - 5;
    
  }
  if (losescreen){
    background(20);
    fill(255);
    textSize(60);
    text("Game Over",500,300);
    textSize(40);
    text("Press 'R' to Retry",500, 400);
  }
    
  if (myhealthbar.health <= 0){
    losescreen = true;
    
  }
  
  }//ends enemy creation loop
  
  //defines what the winscreen looks like
  if (winscreen){
    background(20);
    fill(255);
    textSize(60);
    text("You Win",500,300);
    textSize(40);
    text("Press 'ENTER' to Play Again", 500, 400);
  }
  //defines when the winscreen happens
  if (Level1.xpos <= 500) {
   winscreen = true;
   
  }
  //resets the game after winning
  if (winscreen && key == ENTER){
    winscreen = false;
    myhealthbar.health = 300;
    
    
  }
  //resets the game after losing
  if (losescreen && key == 'r'|| key == 'R'){
    losescreen = false;
    myhealthbar.health = 300;
    
  }
 
  for(int k = 0; k < numPlatforms; k++) {
    //bottom platforms
    alltheplatforms.add(new Platform(color(data[0]), 600, data[1], 80));
    alltheplatforms.add(new Platform(color(20), 800, 450, 200));
    alltheplatforms.add(new Platform(color(20), 1500, 450, 140));
    alltheplatforms.add(new Platform(color(20), 1600, 450, 100));
    alltheplatforms.add(new Platform(color(20), 1900, 450, 80));
    alltheplatforms.add(new Platform(color(20), 2100, 450, 200));
    alltheplatforms.add(new Platform(color(20), 2800, 450, 140));
    alltheplatforms.add(new Platform(color(20), 3200, 450, 200));
    alltheplatforms.add(new Platform(color(20), 3800, 450, 200));
    alltheplatforms.add(new Platform(color(20), 4000, 450, 200));
    alltheplatforms.add(new Platform(color(20), 4200, 450, 80));
    alltheplatforms.add(new Platform(color(20), 4500, 450, 140));
    
    //middle platforms
    alltheplatforms.add(new Platform(color(20), 400, 300, 100));
    alltheplatforms.add(new Platform(color(20), 1000, 300, 80));
    alltheplatforms.add(new Platform(color(20), 1300, 300, 140));
    alltheplatforms.add(new Platform(color(20), 1700, 300, 100));
    alltheplatforms.add(new Platform(color(20), 1800, 300, 120));
    alltheplatforms.add(new Platform(color(20), 2300, 300, 200));
    alltheplatforms.add(new Platform(color(20), 2600, 300, 200));
    alltheplatforms.add(new Platform(color(20), 3400, 300, 200));
    alltheplatforms.add(new Platform(color(20), 3600, 300, 80));
    alltheplatforms.add(new Platform(color(20), 4300, 300, 200));
    
    //top platforms
    alltheplatforms.add(new Platform(color(20), 200, 150, 80));
    alltheplatforms.add(new Platform(color(20), 1100, 150, 100));
    alltheplatforms.add(new Platform(color(20), 1500, 150, 140));
    alltheplatforms.add(new Platform(color(20), 2100, 150, 200));
    alltheplatforms.add(new Platform(color(20), 2500, 150, 100));
    alltheplatforms.add(new Platform(color(20), 3000, 150, 200));
    alltheplatforms.add(new Platform(color(20), 3600, 150, 200));
    alltheplatforms.add(new Platform(color(20), 4000, 150, 140));
    
    
    Platform myPlatform = alltheplatforms.get(k);
  myPlatform.display();
  if (keyleft == true) {
      myPlatform.xpos += myHero.position.x / 50;
      myPlatform.display();
  }
  if (keyright == true) {
      myPlatform.xpos += -myHero.position.x / 50;
      myPlatform.display();
  }
  
    
  }//ends platform creation loop
  
 
  
  
}//ends draw

//defines keys used for hero motion
void keyPressed() {
  if (key == 'a' || key == 'A') keyleft = true;
  if (key == 'd' || key == 'D') keyright = true;
  if (key == 'w' || key == 'W') keyup = true;
  if (key == ' ') swingsword = true;
}//ends keyPressed
void keyReleased() {
  if (key == 'a' || key == 'A') keyleft = false;
  if (key == 'd' || key == 'D') keyright = false;
  if (key == 'w' || key == 'W') keyup = false;
  if (key == ' ') swingsword = false;
}//ends keyReleased


class EndofLevel {
  float xpos;
  float ypos;
  
  //constructor
  EndofLevel(float tempXpos, float tempYpos) {
    xpos = tempXpos;
    ypos = tempYpos;
    
  }//end of constructor
  
  void display() {
  fill(0,150,0);
  rectMode(CORNER);
  rect(xpos,ypos,100,600);
  
  }//ends display
  
}//ends class

class Enemy {
  float xpos;
  float ypos;
  float xspeed;
  
  //constructor
  Enemy(float tempXpos, float tempYpos, float tempXspeed){
  xpos = tempXpos;
  ypos = tempYpos;
  xspeed = tempXspeed;
  
  }//ends constructor
  
  void display (){
    rectMode(CORNER);
    rect (xpos, ypos, 60, 80);
    
  }//ends display
  
  void walk (){
    if (xpos > xpos + 100 || xpos < xpos - 100){
    xspeed = -xspeed;
    xpos += xspeed; 
    
    }
    
  }//ends walk 
  
}//ends enemy class
  
  
class healthbar {
  float xpos;
  float ypos;
  float health;//x width will represent amount of health
  
  //constructor
  healthbar(float tempXpos, float tempYpos, float tempHealth){
    xpos = tempXpos;
    ypos = tempYpos;
    health = tempHealth;
  }//ends constructor
  
  void display(){
    fill(255,0,0);
    rectMode(CORNER);
    rect(xpos, ypos, 300, 25);
    fill(0,255,0);
    rect(xpos, ypos, health, 25);
    
  }//ends display
  
}//ends healthbar class


class Hero {
  PVector position;
  PVector velocity;
  float jumpSpeed;
  float walkSpeed;
  
  //constructor
Hero(float tempXpos, float tempYpos, float tempXvel, float tempYvel, float tempjumpSpeed, float tempwalkSpeed) {
  position = new PVector(tempXpos, tempYpos);
  velocity = new PVector(tempXvel, tempYvel);
  jumpSpeed = tempjumpSpeed;
  walkSpeed = tempwalkSpeed;
  
}//ends constructor

  void drawHero(){
    noFill();
    rectMode(CORNER);
    rect(myHero.position.x, myHero.position.y-50, 80, 100);//temporary hero
    Sword();
  }//ends drawHero method
    
  void Sword(){
    if (swingsword == true){
  swordAngle += angleChange;
    }
  
  if (swordAngle > angleLimit || swordAngle < 90)
  {
    angleChange = -angleChange;
    swordAngle += angleChange;
  }
    pushMatrix();
    translate(myHero.position.x+70, myHero.position.y+20);
    rotate(radians(-swordAngle));
    rect(0, 15, 20, 75);
    popMatrix();
  }//ends draw sword
  
  void walk(){
   /*
    if (keyright == true) {
      pushMatrix();
      translate(-myHero.position.x, 0);
      for(int k = 0; k < numPlatforms; k++) {
    alltheplatforms.add(new Platform(color(20), random(600, 4500), random(80,520), random(80,200)));
    Platform myPlatform = alltheplatforms.get(k);
  myPlatform.display();
  }//ends for loop
      popMatrix();
      */
      
     
  }
  
  void jump(){
    
   if (myHero.position.y < ground)
  {
    myHero.velocity.y += gravity;//if the y coordinate of the velocity vector is above the ground gravity is applied
  }
  else
  {
    myHero.velocity.y = 0; //if the Hero is not above the ground the velocity stays at 0
  }
   
   // If on the ground and "jump" key is pressed set my upward velocity to the jump speed!
  if (myHero.position.y >= ground && keyup == true)//if the position is greater than or equal to the ground
  //and up is not equal to 0 
  {
    myHero.velocity.y = -myHero.jumpSpeed;//set the y velocity to the jump speed
  }
  
   // We check the nextPosition before actually setting the position so we can
  // not move the hero if he's colliding.
 PVector nextPosition = new PVector(myHero.position.x, myHero.position.y);
 nextPosition.add(myHero.velocity);
 
  myHero.position.x = nextPosition.x;
  myHero.position.y = nextPosition.y;
 
    
  }//ends jump method
  
  
  
}//ends Hero class


class Platform {
  color c;
  float xpos;
  float ypos;
  float xdistance;
  
  //constructor
  Platform(color tempC, float tempX, float tempY, float tempXdistance){
    c = tempC;
    xpos = tempX;
    ypos = tempY;
    xdistance = tempXdistance;
  }
  
  void display(){
    fill(c);
    rect(xpos, ypos, xdistance, 25);
  }
  
}//ends Platforms class


